name: E2E üêç tests

on:
  pull_request:
    branches: ["master"]
    paths: ["**.py", "pyproject.toml", "poetry.lock"]
  push:
    branches: ["master"]
    paths: ["**.py", "pyproject.toml", "poetry.lock"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ ! (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')) }}

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      # https://www.notion.so/nibiru/Resources-and-Repo-Configs-b31aa8074a2b419d80b0c946ed5efab0
      LCD_ENDPOINT: ${{ secrets.LCD_ENDPOINT }}
      GRPC_ENDPOINT: ${{ secrets.GRPC_ENDPOINT }}
      TENDERMINT_RPC_ENDPOINT: ${{ secrets.TENDERMINT_RPC_ENDPOINT }}
      WEBSOCKET_ENDPOINT: ${{ secrets.WEBSOCKET_ENDPOINT }}
      CHAIN_ID: ${{ secrets.CHAIN_ID }}
      VALIDATOR_MNEMONIC: ${{ secrets.VALIDATOR_MNEMONIC }}
      ORACLE_MNEMONIC: ${{ secrets.ORACLE_MNEMONIC }}
      NETWORK_INSECURE: ${{ secrets.NETWORK_INSECURE }}
      DEVNET_NUMBER: ${{ secrets.DEVNET_NUMBER }}
    steps:
      # ----------------------------------------------
      # check-out repo and set-up python
      # ----------------------------------------------
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Python 3.7
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7.15
          # 3.7.15 is the highest version available for this GitHub action.
          #   See https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json
          #   to see the full list of supported Python versions.
          # 3.7.16 is the highest 3.7 version available on pyenv
          #   See `grep '3.7' <<< $(pyenv install -l)` to view the available list.

      - name: Run python
        run: python --version && python -c "print('hello')"

      # ----------------------------------------------
      # Try to load a cached poetry binary
      # See https://github.com/snok/install-poetry#caching-the-poetry-installation for the source
      # ----------------------------------------------
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-0 # increment to reset cache

      # ----------------------------------------------
      # Install ping for early tests
      # ----------------------------------------------
      - name: Install ping
        run: sudo apt-get install -y iputils-ping

      # ----------------------------------------------
      # Install & configure poetry
      # ----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          version: latest
      #----------------------------------------------
      # load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # run tests
      #----------------------------------------------
      - name: Install unbuffer command for run step
        run: sudo apt-get install -y expect-dev
      - name: Run Python SDK tests
        run: unbuffer poetry run pytest -s tests --cov=nibiru | tee coverage.txt
        # piping to tee lets us see stdout and write to a file simultaneously.
        # unbuffer retains the colored text from pytest through the pipe to tee
        # -s makes the output verbose to make logs more descriptive.
        # --cov toggles on the coverage report at the specified path
      #----------------------------------------------
      # Upload test output and coverage report as a GitHub artifact
      #----------------------------------------------
      - uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: coverage.txt
