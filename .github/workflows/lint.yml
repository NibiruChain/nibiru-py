name: Linting
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Check out repository code"
        uses: actions/checkout@v2

      - name: "Setup Python"
        uses: actions/setup-python@v2
        with:
          python-version: "3.9.13"

      - name: "Load pip cache if cache exists"
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      - name: "Install and run flake8"
      - run: |
          python -m pip install flake8
          flake8 nibiru
          flake8 tests
          flake8 examples

      # ----------------------------------------------
      # Try to load a cached poetry binary
      # See https://github.com/snok/install-poetry#caching-the-poetry-installation for the source
      # ----------------------------------------------
      - name: "Load cached Poetry installation"
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-0 # increment to reset cache

      - name: "Install poetry"
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          version: latest
      - name: "Load cached venv"
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: "Install dependencies with poetry (using cache)"
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run checks for black and isort
        run: |
          poetry run black . --check
          poetry run isort .
