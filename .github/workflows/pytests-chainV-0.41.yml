name: V 0.14.1 🐍 tests

on:
  push:
    branches: [ "kirill/tests-temp-exp" ]
  pull_request:
    branches: ["kirill/tests-temp-exp"]
    paths:
      - ".github/workflows/pytests-chain.yaml"


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ ! (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')) }}

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      # https://www.notion.so/nibiru/Resources-and-Repo-Configs-b31aa8074a2b419d80b0c946ed5efab0
      CHAIN_ID: ${{ secrets.CHAIN_ID }}
      HOST: localhost
      VALIDATOR_MNEMONIC: ${{ secrets.VALIDATOR_MNEMONIC }}
      ORACLE_MNEMONIC: ${{ secrets.ORACLE_MNEMONIC }}
      GRPC_PORT: ${{ secrets.GRPC_PORT }}
      LCD_PORT: ${{ secrets.LCD_PORT }}
      NETWORK_INSECURE: ${{ secrets.NETWORK_INSECURE }}
      WEBSOCKET_ENDPOINT: ${{ secrets.WEBSOCKET_ENDPOINT }}
    steps:

      - name: Checkout
        uses: actions/checkout@v2
      - name: Find Tag
        id: tagger
        uses: jimschubert/query-tag-action@v1
        with:
          include: 'v*'
          exclude: '*-rc*'
          commit-ish: 'HEAD~'
      - name: Show Tag
        run: |
          echo 'Output from Find Tag: ${{steps.tagger.outputs.tag}}'
          echo ${{ steps.get_version.outputs.version }}
          echo ${{ steps.get_version.outputs.version-without-v }}

      - name: Read Toml
        uses: SebRollen/toml-action@v1.0.0
        id: read_toml
        with:
          file: 'pyproject.toml'
          field: 'name'
      - name: Show Toml
        run: |
         echo 'Output Toml Value: ${{steps.read_toml.outputs.content}}'
          

  # write something in a file and create it
      - run: echo "value" >> new.txt

  # read from file and assign to outputs object
      - name: Read and assign
        id: output_test
        run: |
          input_file="new.txt"
          while read line
          do
           file_text=$line
           done < "$input_file"
          echo ::set-output name=new_value::$file_text

  # test to see if done correctly - should echo "value"
      - run: echo ${​​​​{​​​​​​​​​​​ steps.output_test.outputs.new_value }​​​​​​​​​​​}​​​​​​​​​​​​​​​​​​

      # ----------------------------------------------
      # check-out nibiru repo and deploy
      # ----------------------------------------------
      - name: Checkout nibiru
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.NIBIBOT_GIT_TOKEN }}
          repository: NibiruChain/nibiru
          ref: ${{ env.version }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
          cache: true
#
      - name: Run make build
        run: |
          make build
          make install
#
      - name: Run make localnet
        run: |
          make localnet &

      # ----------------------------------------------
      # check-out repo and set-up python
      # ----------------------------------------------
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Python 3.9
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.13

      - name: Run python
        run: python --version && python -c "print('hello')"



      # ----------------------------------------------
      # Try to load a cached poetry binary
      # See https://github.com/snok/install-poetry#caching-the-poetry-installation for the source
      # ----------------------------------------------
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-0 # increment to reset cache
      # ----------------------------------------------
      # Install & configure poetry
      # ----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      # load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # run tests
      #----------------------------------------------
      - name: Run Python SDK tests
        run: poetry run pytest -s
